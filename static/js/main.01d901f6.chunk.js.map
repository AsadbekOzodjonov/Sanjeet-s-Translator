{"version":3,"sources":["components/Translate.js","App.js","reportWebVitals.js","index.js"],"names":["Translate","useState","inputText","setInputText","resultText","setResultText","selectedLanguageKey","setLanguageKey","languagesList","setLanguagesList","detectLanguageKey","setdetectedLanguageKey","getLanguageSource","axios","post","q","then","response","data","language","useEffect","get","className","Form","Field","control","TextArea","placeholder","onChange","e","target","value","selectedLanguage","map","code","name","Button","color","size","onClick","source","translatedText","Icon","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTASe,SAASA,IAAa,IAAD,EACEC,mBAAS,IADX,mBACzBC,EADyB,KACdC,EADc,OAEIF,mBAAS,IAFb,mBAEzBG,EAFyB,KAEbC,EAFa,OAGcJ,mBAAS,IAHvB,mBAGzBK,EAHyB,KAGJC,EAHI,OAIUN,mBAAS,IAJnB,mBAIzBO,EAJyB,KAIVC,EAJU,OAKoBR,mBAAS,IAL7B,mBAKzBS,EALyB,KAKNC,EALM,KAM1BC,EAAoB,WACtBC,IAAMC,KAAN,mCAA+C,CAC3CC,EAAGb,IAENc,MAAK,SAACC,GACHN,EAAuBM,EAASC,KAAK,GAAGC,cA+BhD,OARAC,qBAAU,WACPP,IAAMQ,IAAN,uCACCL,MAAK,SAACC,GACNR,EAAiBQ,EAASC,SAG3BN,MACA,CAACV,IAEA,gCACI,qBAAKoB,UAAU,aAAf,SACI,oBAAIA,UAAU,SAAd,oCAGJ,qBAAKA,UAAU,WAAf,SACI,8BACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO1B,EAAa0B,EAAEC,OAAOC,UAG3C,yBAAQT,UAAU,kBAAkBM,SA3BpC,SAACI,GACjBzB,EAAeyB,EAAiBF,OAAOC,QA0BvB,UACI,8DACCvB,EAAcyB,KAAI,SAACd,GAChB,OACI,wBAAQY,MAAOZ,EAASe,KAAxB,SACKf,EAASgB,aAM1B,cAACZ,EAAA,EAAKC,MAAN,CACIC,QAASC,IACTC,YAAY,4BACZI,MAAO3B,IAGX,eAACgC,EAAA,EAAD,CACIC,MAAM,SACNC,KAAK,QACLC,QA/DF,WAClBlC,EAAcH,GAEdU,IAEA,IAAIM,EAAO,CACPH,EAAIb,EACJsC,OAAQ9B,EACRoB,OAAQxB,GAEZO,IAAMC,KAAN,sCAAkDI,GACjDF,MAAK,SAACC,GACHZ,EAAcY,EAASC,KAAKuB,oBAgDhB,UAKI,cAACC,EAAA,EAAD,CAAMP,KAAK,cALf,yBCxETQ,MARf,WACE,OACE,8BACE,cAAC3C,EAAD,OCMS4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.01d901f6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Form,\r\n    TextArea,\r\n    Button,\r\n    Icon\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nexport default function Translate() {\r\n    const [inputText, setInputText] = useState('');\r\n    const [resultText, setResultText] = useState('');\r\n    const [selectedLanguageKey, setLanguageKey] = useState('')\r\n    const [languagesList, setLanguagesList] = useState([])\r\n    const [detectLanguageKey, setdetectedLanguageKey] = useState('')\r\n    const getLanguageSource = () => {\r\n        axios.post(`https://libretranslate.de/detect`, {\r\n            q: inputText\r\n        })\r\n        .then((response) => {\r\n            setdetectedLanguageKey(response.data[0].language)\r\n        })\r\n    }\r\n    const translateText = () => {\r\n        setResultText(inputText)\r\n\r\n        getLanguageSource();\r\n\r\n        let data = {\r\n            q : inputText,\r\n            source: detectLanguageKey,\r\n            target: selectedLanguageKey\r\n        }\r\n        axios.post(`https://libretranslate.de/translate`, data)\r\n        .then((response) => {\r\n            setResultText(response.data.translatedText)\r\n        })\r\n    }\r\n\r\n    const languageKey = (selectedLanguage) => {\r\n        setLanguageKey(selectedLanguage.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n       axios.get(`https://libretranslate.de/languages`)\r\n       .then((response) => {\r\n        setLanguagesList(response.data)\r\n       })\r\n\r\n       getLanguageSource()\r\n    }, [inputText])\r\n    return (\r\n        <div>\r\n            <div className=\"app-header\">\r\n                <h2 className=\"header\">Sanjeet's Translator</h2>\r\n            </div>\r\n\r\n            <div className='app-body'>\r\n                <div>\r\n                    <Form>\r\n                        <Form.Field\r\n                            control={TextArea}\r\n                            placeholder='Type Text to Translate..'\r\n                            onChange={(e) => setInputText(e.target.value)}\r\n                        />\r\n\r\n                        <select className=\"language-select\" onChange={languageKey}>\r\n                            <option>Please Select Language..</option>\r\n                            {languagesList.map((language) => {\r\n                                return (\r\n                                    <option value={language.code}>\r\n                                        {language.name}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n\r\n                        <Form.Field\r\n                            control={TextArea}\r\n                            placeholder='Your Result Translation..'\r\n                            value={resultText}\r\n                        />\r\n\r\n                        <Button \r\n                            color=\"orange\" \r\n                            size=\"large\" \r\n                            onClick={translateText}\r\n                        >\r\n                            <Icon name='translate' />\r\n                            Translate</Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Translate from './components/Translate';\n\nfunction App() {\n  return (\n    <div>\n      <Translate/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}